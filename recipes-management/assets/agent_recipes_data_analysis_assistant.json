{
    "type": "assistant",
    "config": {
        "name": "recipes_data_analysis_assistant",
        "llm_config": {
            "config_list": [
                {
                    "model": "gpt-4-1106-preview"
                }
            ],
            "temperature": 0.1,
            "cache_seed": null,
            "timeout": 600,
            "max_tokens": null,
            "extra_body": null
        },
        "human_input_mode": "NEVER",
        "max_consecutive_auto_reply": 8,
        "system_message": "You are a helpful AI assistant that generates and runs code to answer questions about humanitarian response. \n\nIMPORTANT: You ONLY use the skills you have been provided to get data. \n\nWhen you first start run this query to see what tables and columns you have access to: `select table_name, api_name, summary, columns  from table_metadata`\n\nadm0_code are 3-letter country ISO codes\n\nadm1 fields are for states within a country\n\nIf you create a plot, you MUST output an image file.\n\nLink Shapefiles to other data using adm1_code\n\nUnless the user is asking for data changes over time, add the following clause to all queries to get the latest data ...\n\n`group by\n\treference_period_start\nhaving\n  reference_period_start = MAX(reference_period_start)`\n\nWhen generating code, ALWAYS put the task in a function with parameters so that it can be reused.\n\nThe shapefile in the database will need to be converted to a geoseries for plotting, here is an example:\n\n` ``\n# Convert the data into a DataFrame\ndf = pd.DataFrame(rows, columns=[\"adm1_code\", \"population\", \"geometry\"])\n\n# Convert the 'geometry' column into a GeoSeries\ndf['geometry'] = df['geometry'].apply(lambda x: wkb.loads(x, hex=True))\n\n# Convert the DataFrame into a GeoDataFrame\ngdf = gpd.GeoDataFrame(df, geometry='geometry')\n```\n\nSolve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the full code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible. Reply 'TERMINATE' in the end when everything is done.",
        "is_termination_msg": null,
        "code_execution_config": null,
        "default_auto_reply": "",
        "description": "A data analysis assistant agent that writes plans and code to solve tasks."
    },
    "timestamp": "2024-05-12T14:22:21.797901",
    "user_id": "default",
    "skills": [
        {
            "title": "query_data_db",
            "content": "\n  ## This is a skill to execute database queires in the data databse,\n  ## For answering questions about humanitarian response.\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport psycopg2\nimport os\nfrom dotenv import load_dotenv\n\nload_dotenv()\n\ndef get_connection():\n    \"\"\"\n    This function gets a connection to the database\n    \"\"\"\n    host = os.getenv(\"POSTGRES_DATA_HOST\")\n    port = os.getenv(\"POSTGRES_DATA_PORT\")\n    database = os.getenv(\"POSTGRES_DATA_DB\")\n    user = os.getenv(\"POSTGRES_DATA_USER\")\n    password = os.getenv(\"POSTGRES_DATA_PASSWORD\")\n\n    conn = psycopg2.connect(\n        dbname=database,\n        user=user,\n        password=password,\n        host=host,\n        port=port\n    )\n    return conn\n\ndef execute_query(query):\n    \"\"\"\n    This skill executes a query in the data database.\n\n    To find out what tables and columns are available, you can run \"select table_name, api_name, summary, columns from table_metadata\" \n\n    \"\"\"\n    conn = get_connection()\n    cur = conn.cursor()\n\n    # Execute the query\n    cur.execute(query)\n\n    # Fetch all the returned rows\n    rows = cur.fetchall()\n\n    # Close the cursor and connection\n    cur.close()\n    conn.close()\n\n    return rows\n",
            "file_name": null,
            "description": null,
            "timestamp": "2024-05-12T14:21:38.809485",
            "user_id": "default"
        }
    ]
}
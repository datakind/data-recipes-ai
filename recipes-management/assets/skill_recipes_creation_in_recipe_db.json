{
    "title": "recipes_creation_in_recipe_db",
    "content": "\n  ## This is a skill to save python code and answers to a question (referred to as 'data recipes') to the recipe database for later use. \n\nimport os\nimport uuid\nfrom dotenv import load_dotenv\nfrom langchain.docstore.document import Document\nfrom langchain_community.embeddings import AzureOpenAIEmbeddings\nfrom langchain_community.vectorstores.pgvector import PGVector\n\nload_dotenv()\n\n# Lower numbers are more similar\nsimilarity_cutoff = {\"memory\": 0.2, \"recipe\": 0.3, \"helper_function\": 0.1}\n\nCONNECTION_STRING = PGVector.connection_string_from_db_params(\n    driver=os.environ.get(\"POSTGRES_DRIVER\", \"psycopg2\"),\n    host=os.environ.get(\"POSTGRES_RECIPE_HOST\", \"localhost\"),\n    port=int(os.environ.get(\"POSTGRES_RECIPE_PORT\", \"5432\")),\n    database=os.environ.get(\"POSTGRES_RECIPE_DB\", \"postgres\"),\n    user=os.environ.get(\"POSTGRES_RECIPE_USER\", \"postgres\"),\n    password=os.environ.get(\"POSTGRES_RECIPE_PASSWORD\", \"postgres\"),\n)\n\nembedding_model = AzureOpenAIEmbeddings(\n    deployment=os.getenv(\"RECIPES_OPENAI_TEXT_COMPLETION_DEPLOYMENT_NAME\"),\n    azure_endpoint=os.getenv(\"RECIPES_BASE_URL\"),\n    chunk_size=16,\n)\n\ndef add_memory(intent, metadata, db, mem_type=\"recipe\", force=False):\n    \"\"\"\n    Add a data recipe to the data recipe db.\n\n    Parameters:\n    - intent (str): The content of the memory document.\n    - metadata (dict): Additional metadata for the memory document.\n    - mem_type (str): The type of memory store to add the document to.\n    - db (Database): The database object representing the memory store. This is created by the initialize_db function.\n    - force (bool, optional): If True, force the addition of the memory document even if a similar document already exists. Default is False.\n\n    Returns:\n    - id (str): The ID of the added memory document.\n    \"\"\"\n    print(f\"Adding new document to {mem_type} store ...\")\n    data = {}\n    data[\"page_content\"] = intent\n\n    uuid_str = str(uuid.uuid4())\n    metadata[\"custom_id\"] = uuid_str\n\n    metadata[\"mem_type\"] = mem_type\n\n    new_doc = Document(page_content=intent, metadata=metadata)\n    id = db[mem_type].add_documents([new_doc], ids=[uuid_str])\n    return id\n\n\n# Stored in langchain_pg_collection and langchain_pg_embedding as this\ndef initialize_db():\n    \"\"\"\n    Initializes the database by creating store tables if they don't exist and returns the initialized database.\n    The output of this function is needed as the db argument in the add_memory function\n\n    Returns:\n        dict: The initialized database with store tables for each memory type.\n    \"\"\"\n    db = {}\n\n    # This will create store tables if they don't exist\n    for mem_type in similarity_cutoff.keys():\n        COLLECTION_NAME = f\"{mem_type}_embedding\"\n        db[mem_type] = PGVector(\n            collection_name=COLLECTION_NAME,\n            connection_string=CONNECTION_STRING,\n            embedding_function=embedding_model,\n        )\n    return db",
    "file_name": null,
    "description": null,
    "timestamp": "2024-05-12T14:21:38.809485",
    "user_id": "default"
}